#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets API.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü –∏ –ª–∏—Å—Ç–æ–≤, —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ .env —Ñ–∞–π–ª–µ.
"""

import os
import sys
import logging
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
    print("‚úì –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env —Ñ–∞–π–ª–∞")
except ImportError:
    print("‚ö† python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")
logger = logging.getLogger(__name__)

SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]

def test_credentials():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets API"""
    print("\n=== –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö GOOGLE SHEETS API ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    required_vars = {
        'GOOGLE_CREDENTIALS_FILE': os.getenv('GOOGLE_CREDENTIALS_FILE'),
        'SRC_ID': os.getenv('SRC_ID'),
        'DST_ID': os.getenv('DST_ID'),
        'SRC_SHEET': os.getenv('SRC_SHEET'),
        'DST_SHEET': os.getenv('DST_SHEET')
    }
    
    missing_vars = []
    for var_name, var_value in required_vars.items():
        if var_value:
            print(f"   ‚úì {var_name}: {var_value}")
        else:
            print(f"   ‚úó {var_name}: –ù–ï –ù–ê–ô–î–ï–ù–ê")
            missing_vars.append(var_name)
    
    if missing_vars:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª credentials
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ credentials:")
    creds_file = required_vars['GOOGLE_CREDENTIALS_FILE']
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
    if not os.path.isabs(creds_file):
        project_root = os.path.dirname(os.path.abspath(__file__))
        creds_file = os.path.join(project_root, creds_file)
    
    if os.path.exists(creds_file):
        print(f"   ‚úì –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {creds_file}")
    else:
        print(f"   ‚úó –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {creds_file}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
    print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets API:")
    try:
        creds = service_account.Credentials.from_service_account_file(
            creds_file, scopes=SCOPES
        )
        service = build("sheets", "v4", credentials=creds)
        print("   ‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"   ‚úó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–∞–º
    print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–∞–º:")
    
    # –¢–µ—Å—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    try:
        src_id = required_vars['SRC_ID']
        src_sheet = required_vars['SRC_SHEET']
        
        response = service.spreadsheets().values().get(
            spreadsheetId=src_id,
            range=f"{src_sheet}!A1:A1"
        ).execute()
        
        print(f"   ‚úì –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Å—Ç—É–ø–µ–Ω: '{src_sheet}' (ID: {src_id[:10]}...)")
        
    except HttpError as e:
        print(f"   ‚úó –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É: {e}")
        return False
    
    # –¢–µ—Å—Ç –ø—Ä–∏—ë–º–Ω–∏–∫–∞
    try:
        dst_id = required_vars['DST_ID']
        dst_sheet = required_vars['DST_SHEET']
        
        response = service.spreadsheets().values().get(
            spreadsheetId=dst_id,
            range=f"{dst_sheet}!A1:A1"
        ).execute()
        
        print(f"   ‚úì –ü—Ä–∏—ë–º–Ω–∏–∫ –¥–æ—Å—Ç—É–ø–µ–Ω: '{dst_sheet}' (ID: {dst_id[:10]}...)")
        
    except HttpError as e:
        print(f"   ‚úó –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏—ë–º–Ω–∏–∫—É: {e}")
        return False
    
    print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    return True

def test_data_structure():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö"""
    print("\n=== –¢–ï–°–¢ –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• ===")
    
    try:
        # –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å
        creds_file = os.getenv('GOOGLE_CREDENTIALS_FILE')
        creds = service_account.Credentials.from_service_account_file(
            creds_file, scopes=SCOPES
        )
        service = build("sheets", "v4", credentials=creds)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        src_id = os.getenv('SRC_ID')
        src_sheet = os.getenv('SRC_SHEET')
        
        response = service.spreadsheets().values().get(
            spreadsheetId=src_id,
            range=f"{src_sheet}!A1:G1"
        ).execute()
        
        headers = response.get('values', [[]])[0]
        print(f"\n1. –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ({len(headers)} —Å—Ç–æ–ª–±—Ü–æ–≤):")
        for i, header in enumerate(headers):
            column_letter = chr(65 + i)  # A, B, C, D...
            print(f"   {column_letter}: {header}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
        response = service.spreadsheets().values().get(
            spreadsheetId=src_id,
            range=f"{src_sheet}!A2:G6"  # –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
        ).execute()
        
        data_rows = response.get('values', [])
        print(f"\n2. –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ {len(data_rows)} —Å—Ç—Ä–æ–∫):")
        for i, row in enumerate(data_rows[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
            # –î–æ–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É –¥–æ 7 —Å—Ç–æ–ª–±—Ü–æ–≤
            row_padded = row + [''] * (7 - len(row))
            phone = row_padded[3] if len(row_padded) > 3 else ''
            print(f"   –°—Ç—Ä–æ–∫–∞ {i+2}: –¢–µ–ª–µ—Ñ–æ–Ω='{phone}', –°—Ç–æ–ª–±—Ü–æ–≤={len(row)}")
        
        print(f"\n‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö GOOGLE SHEETS")
    print("=" * 50)
    
    if not test_credentials():
        print("\n‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
        return 1
    
    if not test_data_structure():
        print("\n‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö")
        return 1
    
    print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∫—Ä–∏–ø—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    return 0

if __name__ == "__main__":
    sys.exit(main()) 