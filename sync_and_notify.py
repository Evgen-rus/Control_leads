#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Google-—Ç–∞–±–ª–∏—Ü, –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–æ–≤ –≤ –ë–∏—Ç—Ä–∏–∫—Å24.

–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏ (sheet_transfer.py)
2. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –ª–∏–¥–∞—Ö –≤ Telegram (notifier.py)
3. –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–æ–≤ –≤ –ë–∏—Ç—Ä–∏–∫—Å24 (bitrix24_upload.py)

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ
- –§–∞–π–ª credentials.json –¥–ª—è Google Sheets API
- –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ –∏ Chat ID
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤–µ–±—Ö—É–∫ –ë–∏—Ç—Ä–∏–∫—Å24
"""

import asyncio
import logging
import sys
from datetime import datetime
from typing import List, Dict, Any
from pathlib import Path
from notifier import notify_new_rows
from bitrix24_upload import BitrixLeadUploader
from sheet_transfer import sync_and_return_new_rows

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
logs_dir = Path("logs")
logs_dir.mkdir(exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∑–∞–ø–∏—Å—å—é –≤ —Ñ–∞–π–ª
log_filename = logs_dir / f"sync_and_notify_{datetime.now().strftime('%Y%m%d')}.log"

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s: %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
    handlers=[
        logging.FileHandler(str(log_filename), encoding='utf-8'),  # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger(__name__)


async def notify_rows_data(new_rows: List[List[str]]) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –¥–ª—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        new_rows (List[List[str]]): –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    from aiogram import Bot
    from aiogram.utils.text_decorations import html_decoration
    import os
    from dotenv import load_dotenv
    
    def escape_html(text):
        """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML —Å–∏–º–≤–æ–ª–æ–≤"""
        if not text:
            return ""
        return str(text).replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv(override=True)
    
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN_ASSISTANT')
    TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
    
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN_ASSISTANT –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    if not TELEGRAM_CHAT_ID:
        logger.error("TELEGRAM_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Chat ID –≤ —á–∏—Å–ª–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Telegram API
    try:
        TELEGRAM_CHAT_ID = int(TELEGRAM_CHAT_ID)
    except ValueError:
        logger.error(f"TELEGRAM_CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: {TELEGRAM_CHAT_ID}")
        return False
    
    if not new_rows:
        logger.info("–ù–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è Telegram –Ω–µ—Ç")
        return True
    
    async with Bot(token=TELEGRAM_BOT_TOKEN) as bot:
        try:
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(new_rows)} –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram")
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º Chat ID: {TELEGRAM_CHAT_ID}")

            for i, row in enumerate(new_rows, 1):
                try:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏
                    name = row[2] if len(row) > 2 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    phone = row[3] if len(row) > 3 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    comment = row[4] if len(row) > 4 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    additional_comment = row[5] if len(row) > 5 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    audio_link = row[6] if len(row) > 6 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    date = row[0] if len(row) > 0 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    name_escaped = escape_html(name)
                    phone_escaped = escape_html(phone)
                    comment_escaped = escape_html(comment)
                    additional_comment_escaped = escape_html(additional_comment)
                    audio_link_escaped = escape_html(audio_link)
                    date_escaped = escape_html(date)
                    
                    message = (
                        f"–ù–æ–≤—ã–π –ª–∏–¥: {name_escaped} ({phone_escaped})\n\n"
                        f"–ò–º—è: {name_escaped}\n\n"
                        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone_escaped}\n\n"
                        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment_escaped}\n\n"
                        f"–î–æ–ø. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {additional_comment_escaped}\n\n"
                        f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å: {audio_link_escaped}\n\n"
                        f"–î–∞—Ç–∞ –ª–∏–¥–∞: {date_escaped}"
                    )
                    
                    await bot.send_message(
                        chat_id=TELEGRAM_CHAT_ID, 
                        text=message, 
                        parse_mode="HTML"
                    )
                    
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {i}/{len(new_rows)} –¥–ª—è –ª–∏–¥–∞: {name} ({phone})")
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    await asyncio.sleep(1)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç—Ä–æ–∫–∏ {i}: {e}")
                    logger.error(f"–î–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: {row}")
                    
            logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(new_rows)} –ª–∏–¥–æ–≤.")
            return True
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
            return False


def upload_rows_to_bitrix(new_rows: List[List[str]]) -> Dict[str, Any]:
    """
    –°–æ–∑–¥–∞—ë—Ç –ª–∏–¥—ã –≤ –ë–∏—Ç—Ä–∏–∫—Å24 –¥–ª—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        new_rows (List[List[str]]): –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        
    Returns:
        Dict[str, Any]: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (created, failed, leads)
    """
    try:
        if not new_rows:
            logger.info("–ù–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ë–∏—Ç—Ä–∏–∫—Å24 –Ω–µ—Ç")
            return {"created": 0, "failed": 0, "leads": []}
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(new_rows)} –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ë–∏—Ç—Ä–∏–∫—Å24")
        
        # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
        uploader = BitrixLeadUploader()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
        result = uploader.process_new_rows(new_rows)
        
        return result
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –ë–∏—Ç—Ä–∏–∫—Å24: {e}")
        return {"created": 0, "failed": 0, "leads": []}


async def send_bitrix_notification(bitrix_result: Dict[str, Any]) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–æ–≤ –≤ –ë–∏—Ç—Ä–∏–∫—Å24.
    
    Args:
        bitrix_result (Dict[str, Any]): –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–¥–æ–≤ –≤ –ë–∏—Ç—Ä–∏–∫—Å24
        
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    from aiogram import Bot
    import os
    from dotenv import load_dotenv
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv(override=True)
    
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN_ASSISTANT')
    TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
    BITRIX_DOMAIN = os.getenv('BITRIX_WEBHOOK_URL', '').split('/rest/')[0] if os.getenv('BITRIX_WEBHOOK_URL') else ""
    
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ë–∏—Ç—Ä–∏–∫—Å24")
        return False
    
    try:
        TELEGRAM_CHAT_ID = int(TELEGRAM_CHAT_ID)
    except ValueError:
        logger.error(f"TELEGRAM_CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º: {TELEGRAM_CHAT_ID}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
    if bitrix_result.get("created", 0) == 0 and bitrix_result.get("failed", 0) == 0:
        logger.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ª–∏–¥–∞—Ö –≤ –ë–∏—Ç—Ä–∏–∫—Å24 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        return True
    
    async with Bot(token=TELEGRAM_BOT_TOKEN) as bot:
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            created = bitrix_result.get("created", 0)
            failed = bitrix_result.get("failed", 0)
            leads = bitrix_result.get("leads", [])
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
            if created > 0:
                message = f"üöÄ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ë–∏—Ç—Ä–∏–∫—Å24</b>\n\n"
                message += f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –ª–∏–¥–æ–≤: <b>{created}</b>\n"
                if failed > 0:
                    message += f"‚ùå –û—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏: <b>{failed}</b>\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ª–∏–¥—ã
                successful_leads = [lead for lead in leads if lead.get("success") and lead.get("lead_id")]
                
                if successful_leads and BITRIX_DOMAIN:
                    message += "üîó <b>–°—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ª–∏–¥—ã:</b>\n"
                    for lead in successful_leads[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫
                        lead_id = lead["lead_id"]
                        name = lead["name"]
                        phone = lead["phone"]
                        lead_url = f"{BITRIX_DOMAIN}/crm/lead/details/{lead_id}/"
                        message += f"‚Ä¢ <a href='{lead_url}'>{name} ({phone})</a>\n"
                    
                    if len(successful_leads) > 5:
                        message += f"... –∏ –µ—â—ë {len(successful_leads) - 5} –ª–∏–¥–æ–≤\n"
                
            else:
                message = f"‚ùå <b>–û—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏–¥–æ–≤ –≤ –ë–∏—Ç—Ä–∏–∫—Å24</b>\n\n"
                message += f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ª–∏–¥–∞ –∏–∑ {failed} –ø–æ–ø—ã—Ç–æ–∫"
            
            await bot.send_message(
                chat_id=TELEGRAM_CHAT_ID,
                text=message,
                parse_mode="HTML",
                disable_web_page_preview=True
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ë–∏—Ç—Ä–∏–∫—Å24: {created} —Å–æ–∑–¥–∞–Ω–æ, {failed} –æ—à–∏–±–æ–∫")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ë–∏—Ç—Ä–∏–∫—Å24: {e}")
            return False


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ë–∏—Ç—Ä–∏–∫—Å24.
    """
    try:
        start_time = datetime.now()
        logger.info("=== –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê –û–ë–†–ê–ë–û–¢–ö–ò –õ–ò–î–û–í ===")
        logger.info(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {start_time.strftime('%Y-%m-%d %H:%M:%S')}")
        logger.info(f"–õ–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤: {log_filename}")
        
        # –°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        sync_success = False
        telegram_success = False
        bitrix_result = {"created": 0, "failed": 0, "leads": []}
        bitrix_notification_success = False
        new_rows = []
        
        # –≠—Ç–∞–ø 1: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Google-—Ç–∞–±–ª–∏—Ü
        try:
            logger.info("üîÑ –≠–¢–ê–ü 1: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Google-—Ç–∞–±–ª–∏—Ü")
            new_rows = sync_and_return_new_rows()
            sync_success = True
            logger.info(f"‚úÖ –≠—Ç–∞–ø 1 –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ. –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤: {len(new_rows)}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            sync_success = False
            new_rows = []
        
        # –≠—Ç–∞–ø 2: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
        if sync_success and new_rows:
            try:
                logger.info("üì± –≠–¢–ê–ü 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram")
                telegram_success = await notify_rows_data(new_rows)
                if telegram_success:
                    logger.info("‚úÖ –≠—Ç–∞–ø 2 –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.error("‚ùå –≠—Ç–∞–ø 2 –∑–∞–≤–µ—Ä—à—ë–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram: {e}")
                telegram_success = False
        else:
            logger.info("üì± –≠–¢–ê–ü 2: –ü—Ä–æ–ø—É—â–µ–Ω (–Ω–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)")
            telegram_success = True  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        # –≠—Ç–∞–ø 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏–¥–æ–≤ –≤ –ë–∏—Ç—Ä–∏–∫—Å24 (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
        if sync_success and new_rows:
            try:
                logger.info("üöÄ –≠–¢–ê–ü 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏–¥–æ–≤ –≤ –ë–∏—Ç—Ä–∏–∫—Å24")
                bitrix_result = upload_rows_to_bitrix(new_rows)
                logger.info("‚úÖ –≠—Ç–∞–ø 3 –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –≠—Ç–∞–ø 4: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ë–∏—Ç—Ä–∏–∫—Å24
                logger.info("üì© –≠–¢–ê–ü 4: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ë–∏—Ç—Ä–∏–∫—Å24")
                bitrix_notification_success = await send_bitrix_notification(bitrix_result)
                if bitrix_notification_success:
                    logger.info("‚úÖ –≠—Ç–∞–ø 4 –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.error("‚ùå –≠—Ç–∞–ø 4 –∑–∞–≤–µ—Ä—à—ë–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–∏–¥–æ–≤ –≤ –ë–∏—Ç—Ä–∏–∫—Å24: {e}")
                bitrix_result = {"created": 0, "failed": 0, "leads": []}
        else:
            logger.info("üöÄ –≠–¢–ê–ü 3: –ü—Ä–æ–ø—É—â–µ–Ω (–Ω–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)")
            logger.info("üì© –≠–¢–ê–ü 4: –ü—Ä–æ–ø—É—â–µ–Ω (–Ω–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        logger.info("=" * 60)
        logger.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        logger.info("=" * 60)
        logger.info(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if sync_success else '‚ùå –û—à–∏–±–∫–∞'}")
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤: {len(new_rows)}")
        logger.info(f"Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if telegram_success else '‚ùå –û—à–∏–±–∫–∞'}")
        logger.info(f"–õ–∏–¥–æ–≤ —Å–æ–∑–¥–∞–Ω–æ –≤ –ë–∏—Ç—Ä–∏–∫—Å24: {bitrix_result['created']}")
        logger.info(f"–û—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏–¥–æ–≤: {bitrix_result['failed']}")
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ë–∏—Ç—Ä–∏–∫—Å24: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if bitrix_notification_success else '‚ùå –û—à–∏–±–∫–∞'}")
        
        if bitrix_result['created'] > 0 or bitrix_result['failed'] > 0:
            total_processed = bitrix_result['created'] + bitrix_result['failed']
            success_rate = (bitrix_result['created'] / total_processed * 100) if total_processed > 0 else 0
            logger.info(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24: {success_rate:.1f}%")
        
        logger.info("=" * 60)
        logger.info("üéâ –ü–û–õ–ù–´–ô –¶–ò–ö–õ –û–ë–†–ê–ë–û–¢–ö–ò –õ–ò–î–û–í –ó–ê–í–ï–†–®–Å–ù")
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())